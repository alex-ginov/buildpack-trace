#!/bin/bash

# Fonction pour obtenir la derni√®re version
get_latest_version() {
    # R√©cup√®re le dernier tag commen√ßant par 'v' suivi de chiffres
    local latest_tag=$(git tag -l "v[0-9]*" --sort=-v:refname | head -n 1)
    
    if [ -z "$latest_tag" ]; then
        echo "0"
    else
        # Extrait le num√©ro de version (enl√®ve le 'v' au d√©but)
        echo "${latest_tag#v}"
    fi
}

# Obtenir la derni√®re version et incr√©menter
LAST_VERSION=$(get_latest_version)
NEW_VERSION=$((LAST_VERSION + 1))
TAG_NAME="v$NEW_VERSION"

echo "üöÄ Derni√®re version d√©tect√©e: v$LAST_VERSION"
echo "üöÄ Nouvelle version √† d√©ployer: $TAG_NAME"

# V√©rifier s'il y a des modifications non commit√©es
if ! git diff-index --quiet HEAD --; then
    echo "‚è≥ Commit des modifications en cours..."
    git add .
    git commit -m "Pr√©paration du d√©ploiement $TAG_NAME"
fi

# Cr√©er un tag pour la version
echo "üè∑Ô∏è  Cr√©ation du tag $TAG_NAME..."
git tag -a "$TAG_NAME" -m "Version $TAG_NAME"

# Pousser les modifications et les tags
echo "üì§ Envoi des modifications vers le d√©p√¥t distant..."
git push origin main

# D√©ploiement sur Scalingo
echo "‚òÅÔ∏è  D√©ploiement sur Scalingo..."
git push scalingo main

# R√©cup√©ration des logs
echo "üìã R√©cup√©ration des logs..."
scalingo --app poc-trace logs -n 1000 > "deploy_${TAG_NAME}_$(date +%Y%m%d_%H%M%S).log"

echo "‚úÖ D√©ploiement de la version $TAG_NAME termin√© avec succ√®s !"