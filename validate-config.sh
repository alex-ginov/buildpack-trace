#!/bin/bash

# Script de validation de la configuration Tempo
# V√©rifie la syntaxe YAML et la compatibilit√©

set -e

echo "üîç VALIDATION DE LA CONFIGURATION TEMPO"
echo "======================================="

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warn() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_step() {
    echo -e "${BLUE}üîß $1${NC}"
}

# 1. V√©rifier l'existence des fichiers
log_step "V√©rification des fichiers..."

if [ -f "config/tempo.yaml" ]; then
    log_info "‚úÖ config/tempo.yaml existe"
else
    log_error "‚ùå config/tempo.yaml manquant"
    exit 1
fi

if [ -f "bin/start-tempo" ]; then
    log_info "‚úÖ bin/start-tempo existe"
else
    log_error "‚ùå bin/start-tempo manquant"
    exit 1
fi

if [ -f "bin/start-tempo-grpc" ]; then
    log_info "‚úÖ bin/start-tempo-grpc existe"
else
    log_error "‚ùå bin/start-tempo-grpc manquant"
    exit 1
fi

if [ -f "Procfile" ]; then
    log_info "‚úÖ Procfile existe"
else
    log_error "‚ùå Procfile manquant"
    exit 1
fi

# 2. V√©rifier la syntaxe YAML
log_step "V√©rification de la syntaxe YAML..."

# Test avec Python pour valider la syntaxe YAML
if python3 -c "import yaml; yaml.safe_load(open('config/tempo.yaml'))" 2>/dev/null; then
    log_info "‚úÖ Syntaxe YAML valide"
else
    log_error "‚ùå Erreur de syntaxe YAML"
    echo "D√©tails de l'erreur :"
    python3 -c "import yaml; yaml.safe_load(open('config/tempo.yaml'))" 2>&1 || true
    exit 1
fi

# 3. V√©rifier le contenu de la configuration
log_step "V√©rification du contenu de la configuration..."

# V√©rifier les champs obligatoires
if grep -q "server:" config/tempo.yaml; then
    log_info "‚úÖ Section 'server' pr√©sente"
else
    log_error "‚ùå Section 'server' manquante"
fi

if grep -q "storage:" config/tempo.yaml; then
    log_info "‚úÖ Section 'storage' pr√©sente"
else
    log_error "‚ùå Section 'storage' manquante"
fi

if grep -q "distributor:" config/tempo.yaml; then
    log_info "‚úÖ Section 'distributor' pr√©sente"
else
    log_error "‚ùå Section 'distributor' manquante"
fi

# V√©rifier les variables d'environnement
if grep -q "\${PORT}" config/tempo.yaml; then
    log_info "‚úÖ Variable \${PORT} utilis√©e"
else
    log_warn "‚ö†Ô∏è  Variable \${PORT} non utilis√©e"
fi

if grep -q "\${TCP_GRPC_PORT:-4317}" config/tempo.yaml; then
    log_info "‚úÖ Variable \${TCP_GRPC_PORT:-4317} utilis√©e"
else
    log_warn "‚ö†Ô∏è  Variable \${TCP_GRPC_PORT:-4317} non utilis√©e"
fi

# 4. V√©rifier les scripts de d√©marrage
log_step "V√©rification des scripts de d√©marrage..."

# V√©rifier que les scripts sont ex√©cutables
if [ -x "bin/start-tempo" ]; then
    log_info "‚úÖ bin/start-tempo est ex√©cutable"
else
    log_warn "‚ö†Ô∏è  bin/start-tempo n'est pas ex√©cutable"
fi

if [ -x "bin/start-tempo-grpc" ]; then
    log_info "‚úÖ bin/start-tempo-grpc est ex√©cutable"
else
    log_warn "‚ö†Ô∏è  bin/start-tempo-grpc n'est pas ex√©cutable"
fi

# V√©rifier le contenu des scripts
if grep -q "exec.*tempo" bin/start-tempo; then
    log_info "‚úÖ Script start-tempo contient la commande tempo"
else
    log_error "‚ùå Script start-tempo ne contient pas la commande tempo"
fi

if grep -q "exec.*tempo" bin/start-tempo-grpc; then
    log_info "‚úÖ Script start-tempo-grpc contient la commande tempo"
else
    log_error "‚ùå Script start-tempo-grpc ne contient pas la commande tempo"
fi

# 5. V√©rifier le Procfile
log_step "V√©rification du Procfile..."

if grep -q "web:" Procfile; then
    log_info "‚úÖ Processus 'web' d√©fini dans Procfile"
else
    log_error "‚ùå Processus 'web' manquant dans Procfile"
fi

if grep -q "tcp:" Procfile; then
    log_info "‚úÖ Processus 'tcp' d√©fini dans Procfile"
else
    log_error "‚ùå Processus 'tcp' manquant dans Procfile"
fi

# 6. V√©rifier les permissions
log_step "V√©rification des permissions..."

# Rendre les scripts ex√©cutables si n√©cessaire
chmod +x bin/start-tempo 2>/dev/null || true
chmod +x bin/start-tempo-grpc 2>/dev/null || true

log_info "‚úÖ Permissions des scripts mises √† jour"

# 7. R√©sum√© de la validation
echo ""
echo "üìä R√©sum√© de la validation:"
echo "=========================="

# Compter les erreurs
ERRORS=0
WARNINGS=0

# V√©rifier les erreurs critiques
if ! grep -q "server:" config/tempo.yaml; then
    ((ERRORS++))
fi

if ! grep -q "storage:" config/tempo.yaml; then
    ((ERRORS++))
fi

if ! grep -q "distributor:" config/tempo.yaml; then
    ((ERRORS++))
fi

if [ $ERRORS -eq 0 ]; then
    log_info "‚úÖ Configuration valide - Pr√™t pour le d√©ploiement"
    echo ""
    echo "üöÄ Actions recommand√©es:"
    echo "1. git add ."
    echo "2. git commit -m 'FIX: Valid Tempo configuration'"
    echo "3. git push scalingo main"
else
    log_error "‚ùå $ERRORS erreur(s) critique(s) d√©tect√©e(s)"
    echo "Veuillez corriger les erreurs avant de d√©ployer"
fi

echo ""
log_info "Validation termin√©e !"
